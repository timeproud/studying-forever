# 创建人：gw
# 开发时间：2022/7/19 16:55


# 函数
"""
什么是函数：函数就是执行特定任务以完成特定功能的一段代码
为什么需要函数：复用代码、隐藏实现细节、提高可维护性、提高可读性便于调试
"""


# 1.函数的创建： def 函数名（[输入参数]）：函数体    [return xxx]
def calc(a, b):     # a, b 称为形式参数，出现在函数定义处
    c = a + b
    return c


result = calc(10, 20)   # 10， 20 称为实参，出现在调用处
print(result)


# 2.函数的参数传递
"""
位置实参：根据形参对应的位置进行实参传递，实参第一个位置对应形参第一个位置，由此递推
关键字实参：根据形参名称进行实参传递。如调用时写calc（b = 10, a = 20）

如果是不可变对象，在函数体中的修改不会影响实际参数的值（如下方的arg1），如果是可变对象，在函数体中的修改会影响到实参的值（如下方arg2）
"""


def fun(arg1, arg2):
    print('arg1', arg1)
    print('arg2', arg2)
    arg1 = 100
    arg2.append(10)
    print('arg1', arg1)
    print('arg2', arg2)


n1 = 11
n2 = [22, 33, 44]
fun(n1, n2)


print('n1', n1)
print('n2', n2)


# 3.函数的返回值
"""
函数的返回值：
    （1）如果函数没有返回值[函数执行完毕后不需要给调用处提供数据]，return可以不写
    （2）函数的返回值，如果是1个，直接返回类型
    （3）函数的返回值如果是多个，返回的结果为一个元组
函数是否需要返回值，要视情况而定。
"""
# 没有返回值


def nonereturn():
    print('函数可以没有返回值')


# 函数返回多个值的时候，结果为元组


def fun1(num):
    odd = []   # 存奇数
    even = []  # 存偶数
    for i in num:
        if i % 2:
            odd.append(i)
        else:
            even.append(i)
    return odd, even


print(fun1([1, 5, 6, 89, 45, 6]))


# 3.函数的参数定义
# 函数定义默认值参数：函数定义时，给形参设置默认值，只有与默认值不符合时才需要传递参数
def dayin(a, b=10):
    print(a, b)


dayin(100)   # a = 100, b为默认值10
dayin(20, 30)  # a = 20, b = 30

# 个数可变的位置参数：定义参数时，可能事先不确定传递的位置实参的个数时，使用可变的位置参数，使用*定义。返回结果为一个元组
"""
def fun(*arg1, *arg2):
    pass
    
上面这段代码会报错，因为只能有1个个数可变的位置参数
"""


def dayins(*args):
    print(args)


dayins(20)
dayins(10, 15, 20, 25)


# 个数可变的关键字形参：定义参数时，可能事先不确定传递的关键字实参的个数时，使用可变的关键字形参，使用**定义。返回结果为一个字典
"""个数可变的关键字参数也只能有一个"""


def dayinzi(**arg):
    print(arg)


dayinzi(a=10, b=20, c=30)


"""
def fun(*arg1, **arg2)  不报错
def fun(**arg1, *arg2)  报错
当函数定义时，既有个数可变的位置参数，又有个数可变的关键字参数时。应该将位置参数放在关键字参数之前
"""


# （重点例子）


def fuzhi(a, b, c):
    print('a=', a, end='\t')
    print('b=', b, end='\t')
    print('c=', c)


def fuzhi2(a, b, *, c):    # 在*之后的参数，只能采用关键字参数传递
    print('a=', a, end='\t')
    print('a=', b, end='\t')
    print('a=', c, end='\t')


fuzhi(10, 20, 30)   # 函数调用时的参数传递，称为位置实参
lst = [11, 22, 33]
fuzhi(*lst)   # 在函数调用时，将列表中的每个元素都转换为位置实参传入

fuzhi2(a=100, b=200, c=300)  # 函数的调用，是关键字实参
dic = {'a': 111, 'b': 222, 'c': 333}
fuzhi(**dic)  # 在函数调用时，将字典中的键值对都转换为关键字实参转入


# 4.变量的作用域
"""根据变量的有效范围可分为：
          局部变量：在函数内定义的变量，只在函数内部有效，局部变量使用global声明，则可以转为全局变量
          全局变量：函数体外的变量，可作用与函数内外               
"""
m = 10    # d是全局变量


def add(x, y):
    #global z = x + y + m    # 如果这么定义z，那么z是全局变量
    z = x + y + m    # z是局部变量
    print(z)


add(10, 20)


# 递归函数
"""
什么是递归函数：如果在一个函数的函数体内调用了该函数本身，这个函数就被称为递归函数
递归的组成部分：递归调用与递归终止条件
递归的调用过程：每调用一次函数，都会在栈内存分配一个栈帧，每执行完一次函数，都会释放相应空间
递归的优缺点：缺点：占用内存多，效率低下。   优点：思路和代码简单
"""
# 用递归计算阶乘


def jiecheng(n):
    if n == 1:
        return 1
    else:
        res = n * jiecheng(n-1)
        return res


print(jiecheng(5))
# 斐波那契数列：第一项是1，第二项是1，之后的每项都是前两项之和


def feibo(n):
    if n <= 0:
        print('\'n\' is invalid')
    elif 1 <= n <= 2:
        return 1
    else:
        res = feibo(n-2) + feibo(n-1)
        return res


print(feibo(8))
for i in range(1, 7):
    print(feibo(i), end='\t')